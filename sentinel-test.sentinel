import "tfplan/v2" as tfplan

required_apis = ["storage.googleapis.com", "monitoring.googleapis.com"]


func is_resource_changed() {
    for tfplan.resource_changes as _, details {
        if details.type is "google_project_service" and 
           (details.change.actions contains "create" or 
            details.change.actions contains "delete" or 
            details.change.actions contains "update" or
            details.change.actions == ["delete", "create"]) {
                return true
        }
        if details.type is "google_project" and 
           (details.change.actions contains "create" or 
            details.change.actions contains "delete" or 
            details.change.actions contains "update" or
            details.change.actions == ["delete", "create"]) {
                return true
        }

    }
    return false
}


func is_api_created_for_module(api, module_addr) {
    for tfplan.resource_changes as service_resource, service_details {
        if service_details.type is "google_project_service" and
            service_details.change.actions contains "create" and
            service_details.change.after.service contains api and
            service_details.module_address == module_addr {
                return true
        }
    }
    return false
}

func is_api_deleted_for_module(api, module_addr) {
    for tfplan.resource_changes as service_resource, service_details {
        if service_details.type is "google_project_service" and
            (service_details.change.actions contains "delete") and
            service_details.change.before.service contains api and
            service_details.module_address == module_addr {
               return true
            }
    }
    return false
}

func is_api_created_for_project(api, project_name) {
    for tfplan.resource_changes as service_resource, service_details {
        if service_details.type is "google_project_service" and
           service_details.change.actions contains "create" and
           service_details.change.after.service contains api and
           (service_details.change.after.project == project_name) {
            return true
        }
    }
    return false
}

func is_api_deleted_for_project(api, project_name) {
    for tfplan.resource_changes as service_resource, service_details {
        if service_details.type is "google_project_service" and
           service_details.change.actions contains "delete" and
           service_details.change.before.service contains api and
           (service_details.change.before.project == project_name) {
            return true
        }
    }
    return false
}

func is_module_address_equal_create() {
    project_module_address = ""
    project_name = ""

    for tfplan.resource_changes as _, details {
        // Check if the resource is a google_project and is being created
        if details.type is "google_project" and (details.change.actions contains "create") {
            project_module_address = details.module_address
            project_name = details.change.after.name 
            for required_apis as api {
                if project_module_address != "" and is_api_created_for_module(api, project_module_address) {
                    return true
                }
                if project_module_address != "" and !is_api_created_for_module(api, project_module_address) {
                    return false
                }
                if project_module_address == "" and is_api_created_for_project(api, project_name) {
                    return true
                }
                if project_module_address == "" and !is_api_created_for_project(api, project_name) {
                    return false
                }
            }
        }
        
    }
    return false
}





// is deleted project module address equal to module address of API that is deleted 
func is_module_address_equal_delete() {
    project_module_address = ""
    project_name = ""

    for tfplan.resource_changes as _, details {
        // Check if the resource is a google_project and is being deleted
        if details.type is "google_project" and details.change.actions contains "delete" {
            project_module_address = details.module_address
            project_name = details.change.before.name 
            for required_apis as api {
                if project_module_address != "" and is_api_deleted_for_module(api, project_module_address) {
                    return true
                }
                if project_module_address == "" and is_api_deleted_for_project(api, project_name) {
                    return true
                }       
            }
        }
        
    }
    return false
}



// module update and api enable 
func is_module_api_update_or_no_chg() {
    project_module_address = ""
    project_name = ""

    for tfplan.resource_changes as _, details {
        // Check if the resource is a google_project and is being deleted
        if details.type is "google_project" and details.change.actions contains "no-op" {
            project_module_address = details.module_address
            project_name = details.change.after.name 
            for required_apis as api {
                if project_module_address != "" and is_api_created_for_module(api, project_module_address) {
                    return true
                }
                if project_module_address != "" and is_api_deleted_for_module(api, project_module_address) {
                    return false
                }  
                if project_module_address == "" and is_api_created_for_project(api, project_name) {
                    return true
                }
                if project_module_address == "" and is_api_deleted_for_project(api, project_name) {
                    return false
                }              
            }
        }
        
    }
    return false
}




module_api_addr = rule {
    !is_resource_changed() or is_module_address_equal_create() or is_module_address_equal_delete() or is_module_api_update_or_no_chg()
}


main = rule {
    module_api_addr
}
