import "tfplan/v2" as tfplan

required_apis = ["storage.googleapis.com", "monitoring.googleapis.com"]

# Count the number of projects being created
func count_projects_being_created() {
    count = 0
    for tfplan.resource_changes as _, details {
        if details.type is "google_project" and details.change.actions contains "create" {
            count += 1
        }
    }
    return count
}

# Count the number of times a specific API is being enabled
func count_api_being_enabled(api) {
    count = 0
    for tfplan.resource_changes as _, details {
        if details.type is "google_project_service" and details.change.actions contains "create" and details.change.after.service == api {
            count += 1
        }
    }
    return count
}

# Ensure that the number of each required API is equal to or greater than the number of projects being created
func are_required_apis_enabled_for_all_projects() {
    project_count = count_projects_being_created()
    for required_apis as api {
        if count_api_being_enabled(api) < project_count {
            return false
        }
    }
    return true
}



# Count the number of projects being deleted
func count_projects_being_deleted() {
    count = 0
    for tfplan.resource_changes as _, details {
        if details.type is "google_project" and details.change.actions contains "delete" {
            count += 1
        }
    }
    return count
}

# Count the number of times a specific API is being disabled
func count_api_being_disabled(api) {
    count = 0
    for tfplan.resource_changes as _, details {
        if details.type is "google_project_service" and details.change.actions contains "delete" and details.change.before.service == api {
            count += 1
        }
    }
    return count
}

# Ensure that the number of each required API being disabled is equal to or smaller than the number of projects being deleted
func are_required_apis_disabled_for_all_projects() {
    project_count = count_projects_being_deleted()
    for required_apis as api {
        if count_api_being_disabled(api) > project_count {
            return false
        }
    }
    return true
}


is_api_amount_eq_proj_amount = rule {
    (are_required_apis_enabled_for_all_projects() and are_required_apis_disabled_for_all_projects()) 
}

main = rule {
    is_api_amount_eq_proj_amount
}
